const express = require("express");
const bodyParser = require("body-parser");
const fetch = require("node-fetch");
const dotenv = require("dotenv");
const path = require("path");
const multer = require("multer");
const fs = require("fs");
const mammoth = require("mammoth");
const pdfParse = require("pdf-parse");
const session = require('express-session');
const bcrypt = require('bcryptjs');
const SQLiteStore = require('connect-sqlite3')(session);
const rateLimit = require('express-rate-limit');
const helmet = require('helmet');
const { v4: uuidv4 } = require('uuid');

dotenv.config();

const app = express();

// Debug: API Key Check
console.log("üîç DEBUG INFO:");
console.log("OpenAI API Key vorhanden:", !!process.env.OPENAI_API_KEY);
console.log("API Key L√§nge:", process.env.OPENAI_API_KEY ? process.env.OPENAI_API_KEY.length : 0);

// Enhanced Multer Configuration for Audio & Files
const storage = multer.diskStorage({
    destination: (req, file, cb) => {
        const uploadDir = req.path.includes('audio') ? 'uploads/audio/' : 'uploads/';
        if (!fs.existsSync(uploadDir)) {
            fs.mkdirSync(uploadDir, { recursive: true });
        }
        cb(null, uploadDir);
    },
    filename: (req, file, cb) => {
        const uniqueName = Date.now() + '-' + Math.round(Math.random() * 1E9) + path.extname(file.originalname);
        cb(null, uniqueName);
    }
});

const upload = multer({ 
    storage: storage,
    limits: { fileSize: 100 * 1024 * 1024 }, // 100MB for audio files
    fileFilter: (req, file, cb) => {
        if (req.path.includes('audio')) {
            // Audio files for Whisper
            const audioTypes = /mp3|wav|m4a|ogg|flac|webm|mp4/;
            const extname = audioTypes.test(path.extname(file.originalname).toLowerCase());
            const mimetype = file.mimetype.startsWith('audio/') || file.mimetype.startsWith('video/');
            
            if (mimetype && extname) {
                return cb(null, true);
            } else {
                cb(new Error('Nur Audio-Dateien erlaubt (MP3, WAV, M4A, OGG, FLAC)'));
            }
        } else {
            // Regular files
            const allowedTypes = /jpeg|jpg|png|pdf|doc|docx|txt/;
            const extname = allowedTypes.test(path.extname(file.originalname).toLowerCase());
            const mimetype = allowedTypes.test(file.mimetype);
            
            if (mimetype && extname) {
                return cb(null, true);
            } else {
                cb(new Error('Nicht unterst√ºtzter Dateityp'));
            }
        }
    }
});

app.use(bodyParser.json({ limit: '10mb' }));
app.use(bodyParser.urlencoded({ extended: true, limit: '10mb' }));
app.use(express.static(path.join(__dirname, "public")));

// --- Database Import --- //
const {
  addClient,
  getClients,
  getClientById,
  deleteClient,
  updateClient,
  addSession,
  getSessionsByClient,
  addDocument,
  getDocumentsByClient,
  addChatMessage,
  getChatHistory,
  getStatistics,
  addAssessment,
  getAssessmentsByClient
} = require("./db");

// --- STANDARDIZED ASSESSMENT INSTRUMENTS --- //
const ASSESSMENTS = {
  'PHQ-9': {
    name: 'Patient Health Questionnaire-9',
    type: 'depression',
    questions: [
      'Wenig Interesse oder Freude an T√§tigkeiten',
      'Niedergeschlagenheit, Schwermut oder Hoffnungslosigkeit',
      'Schwierigkeiten beim Ein- oder Durchschlafen oder vermehrter Schlaf',
      'M√ºdigkeit oder Gef√ºhl, keine Energie zu haben',
      'Verminderter Appetit oder √ºberm√§√üiges Bed√ºrfnis zu essen',
      'Schlechte Meinung von sich selbst; Gef√ºhl ein Versager zu sein',
      'Schwierigkeiten sich zu konzentrieren',
      'Langsame Bewegungen oder Sprache, oder Unruhe',
      'Gedanken, dass Sie besser tot w√§ren oder sich Leid zuf√ºgen m√∂chten'
    ],
    scale: ['√úberhaupt nicht', 'An einzelnen Tagen', 'An mehr als der H√§lfte der Tage', 'Beinahe jeden Tag'],
    scoring: {
      minimal: [0, 4],
      mild: [5, 9],
      moderate: [10, 14],
      moderateSevere: [15, 19],
      severe: [20, 27]
    },
    maxScore: 27
  },
  'GAD-7': {
    name: 'Generalized Anxiety Disorder 7-item',
    type: 'anxiety',
    questions: [
      'Nervosit√§t, √Ñngstlichkeit oder Anspannung',
      'Nicht in der Lage sein, Sorgen zu stoppen oder zu kontrollieren',
      'Zu viele Sorgen bez√ºglich verschiedener Angelegenheiten',
      'Schwierigkeiten zu entspannen',
      'Unruhe, sodass Stillsitzen schwer f√§llt',
      'Schnelle Ver√§rgerung oder Gereiztheit',
      'Angst, dass etwas Schlimmes passieren k√∂nnte'
    ],
    scale: ['√úberhaupt nicht', 'An einzelnen Tagen', 'An mehr als der H√§lfte der Tage', 'Beinahe jeden Tag'],
    scoring: {
      minimal: [0, 4],
      mild: [5, 9],
      moderate: [10, 14],
      severe: [15, 21]
    },
    maxScore: 21
  },
  'PCL-5': {
    name: 'PTSD Checklist for DSM-5',
    type: 'trauma',
    questions: [
      'Wiederholte, st√∂rende und ungewollte Erinnerungen an das belastende Ereignis',
      'Wiederholte, st√∂rende Tr√§ume √ºber das belastende Ereignis',
      'Pl√∂tzliches Verhalten oder Gef√ºhl, als ob das belastende Ereignis erneut geschieht',
      'Sehr starke belastende Gef√ºhle bei Erinnerung an das Ereignis',
      'Starke k√∂rperliche Reaktionen bei Erinnerung an das Ereignis',
      'Vermeidung von Erinnerungen, Gedanken oder Gef√ºhlen bez√ºglich des Ereignisses',
      'Vermeidung von √§u√üeren Erinnerungen (Menschen, Orte, Gespr√§che, etc.)',
      'Probleme, sich an wichtige Teile des belastenden Ereignisses zu erinnern',
      'Starke negative √úberzeugungen √ºber sich selbst, andere oder die Welt',
      'Andere oder sich selbst f√ºr das Ereignis oder die Folgen verantwortlich machen',
      'Starke negative Gef√ºhle (Angst, Wut, Schuld, Scham)',
      'Deutlich vermindertes Interesse an Aktivit√§ten',
      'Gef√ºhl der Entfremdung oder Distanziertheit von anderen',
      'Anhaltende Unf√§higkeit positive Gef√ºhle zu empfinden',
      'Reizbarkeit, Wutausbr√ºche oder Aggressivit√§t',
      '√úberm√§√üig risikoreiches oder selbstsch√§digendes Verhalten',
      '√úberm√§√üige Wachsamkeit',
      '√úbertriebene Schreckreaktionen',
      'Schwierigkeiten sich zu konzentrieren',
      'Schlafst√∂rungen'
    ],
    scale: ['√úberhaupt nicht', 'Ein wenig', 'M√§√üig', 'Ziemlich', 'Extrem'],
    scoring: {
      minimal: [0, 32],
      mild: [33, 37],
      moderate: [38, 43],
      severe: [44, 80]
    },
    maxScore: 80
  },
  'OQ-45': {
    name: 'Outcome Questionnaire-45',
    type: 'general',
    questions: [
      'Ich komme mit anderen Menschen gut aus',
      'Ich werde m√ºde ohne besonderen Grund',
      'Ich bin ungl√ºcklich in meiner Ehe/Partnerschaft',
      'Ich habe Gedanken, mir selbst das Leben zu nehmen',
      'Ich f√ºhle mich schwach',
      'Meine Arbeit/Schule leidet',
      'Ich bin eine gl√ºckliche Person',
      'Ich habe Probleme bei der Arbeit/Schule wegen Drogen- oder Alkoholkonsums'
      // Vereinfachte Version - das echte OQ-45 hat 45 Fragen
    ],
    scale: ['Nie', 'Selten', 'Manchmal', 'H√§ufig', 'Fast immer'],
    scoring: {
      normal: [0, 63],
      mild: [64, 83],
      moderate: [84, 103],
      severe: [104, 180]
    },
    maxScore: 180
  }
};

// --- ENHANCED AI FUNCTIONS --- //

async function callOpenAI(messages, model = "gpt-3.5-turbo") {
    if (!process.env.OPENAI_API_KEY) {
        throw new Error('OpenAI API Key nicht konfiguriert');
    }

    try {
        const response = await fetch('https://api.openai.com/v1/chat/completions', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`
            },
            body: JSON.stringify({
                model: model,
                messages: messages,
                max_tokens: 2000,
                temperature: 0.7,
                presence_penalty: 0.1,
                frequency_penalty: 0.1
            })
        });

        if (!response.ok) {
            const error = await response.json();
            throw new Error(error.error?.message || `OpenAI API Fehler: ${response.status}`);
        }

        const data = await response.json();
        return data.choices[0].message.content;
    } catch (error) {
        console.error('‚ùå OpenAI API Fehler:', error);
        throw error;
    }
}

async function transcribeAudio(audioFilePath) {
    if (!process.env.OPENAI_API_KEY) {
        throw new Error('OpenAI API Key nicht konfiguriert');
    }

    try {
        const FormData = require('form-data');
        const form = new FormData();
        
        form.append('file', fs.createReadStream(audioFilePath));
        form.append('model', 'whisper-1');
        form.append('language', 'de'); // German
        form.append('response_format', 'json');
        form.append('temperature', '0');

        const response = await fetch('https://api.openai.com/v1/audio/transcriptions', {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
                ...form.getHeaders()
            },
            body: form
        });

        if (!response.ok) {
            const error = await response.json();
            throw new Error(error.error?.message || `Whisper API Fehler: ${response.status}`);
        }

        const data = await response.json();
        return data.text;
    } catch (error) {
        console.error('‚ùå Whisper API Fehler:', error);
        throw error;
    }
}

async function analyzeTherapyText(text, analysisType = 'general') {
    const systemPrompts = {
        general: `Du bist ein erfahrener Psychotherapeut und Supervisor. Analysiere den folgenden Therapie-Text und erstelle eine strukturierte Zusammenfassung.

Fokussiere auf:
- Hauptthemen und Problembereiche
- Emotionale Zust√§nde und Stimmung
- Fortschritte oder R√ºckschritte
- Therapeutische Interventionen
- Empfehlungen f√ºr weitere Sitzungen

Antworte professionell und wissenschaftlich fundiert.`,

        protocol: `Du bist ein Experte f√ºr Therapieprotokoll-Erstellung. Erstelle aus dem folgenden Therapie-Gespr√§ch ein strukturiertes Sitzungsprotokoll.

Format:
**Datum:** [Datum der Sitzung]
**Dauer:** [Sitzungsdauer]
**Hauptthemen:**
- Thema 1
- Thema 2

**Beobachtungen:**
- Stimmung und Affekt
- Verhalten und Interaktion

**Interventionen:**
- Angewandte Techniken
- Therapeutische Ma√ünahmen

**Hausaufgaben/Vereinbarungen:**
- Konkrete Aufgaben

**N√§chste Schritte:**
- Planung der Folgesitzung`,

        progress: `Du bist ein Therapeut, der Therapieverl√§ufe bewertet. Analysiere den Text auf Fortschritte und erstelle eine Fortschrittsbewertung.

Bewerte:
- Symptomver√§nderungen
- Funktionsverbesserungen
- Therapeutische Allianz
- Zielerreichung
- Empfehlungen f√ºr Anpassungen`
    };

    const systemPrompt = systemPrompts[analysisType] || systemPrompts.general;

    return await callOpenAI([
        { role: "system", content: systemPrompt },
        { role: "user", content: text }
    ]);
}

// --- ASSESSMENT HELPER FUNCTIONS --- //

function calculateAssessmentScore(assessmentType, responses) {
    const assessment = ASSESSMENTS[assessmentType];
    if (!assessment) throw new Error('Unbekannter Assessment-Typ');
    
    const totalScore = responses.reduce((sum, response) => sum + response, 0);
    
    // Bestimme Schweregrad
    let severityLevel = 'unknown';
    for (const [level, range] of Object.entries(assessment.scoring)) {
        if (totalScore >= range[0] && totalScore <= range[1]) {
            severityLevel = level;
            break;
        }
    }
    
    return {
        totalScore,
        severityLevel,
        maxScore: assessment.maxScore,
        percentage: Math.round((totalScore / assessment.maxScore) * 100)
    };
}

async function generateOutcomeAnalysis(clientId, assessmentType = null) {
    try {
        const assessments = getAssessmentsByClient(clientId, assessmentType);
        
        if (assessments.length < 2) {
            return {
                analysis: 'Nicht gen√ºgend Daten f√ºr Verlaufsanalyse. Mindestens 2 Assessments erforderlich.',
                trend: 'insufficient_data',
                recommendations: ['Regelm√§√üige Assessments durchf√ºhren f√ºr bessere Verlaufsdokumentation']
            };
        }
        
        // Trend-Analyse
        const latest = assessments[0];
        const previous = assessments[1];
        const scoreDifference = latest.total_score - previous.total_score;
        const percentageChange = Math.round(((scoreDifference) / previous.total_score) * 100);
        
        let trend = 'stable';
        let trendDescription = '';
        
        if (scoreDifference < -2) {
            trend = 'improving';
            trendDescription = `Verbesserung um ${Math.abs(scoreDifference)} Punkte (${Math.abs(percentageChange)}%)`;
        } else if (scoreDifference > 2) {
            trend = 'worsening';
            trendDescription = `Verschlechterung um ${scoreDifference} Punkte (${percentageChange}%)`;
        } else {
            trend = 'stable';
            trendDescription = `Stabiler Verlauf (${scoreDifference >= 0 ? '+' : ''}${scoreDifference} Punkte)`;
        }
        
        // KI-gest√ºtzte Analyse falls OpenAI verf√ºgbar
        let detailedAnalysis = '';
        if (process.env.OPENAI_API_KEY) {
            const assessmentData = assessments.slice(0, 5).map(a => ({
                date: a.completed_at.split('T')[0],
                score: a.total_score,
                severity: a.severity_level
            }));
            
            const prompt = `Als Therapeut analysiere folgenden ${assessmentType} Verlauf:
            
${assessmentData.map(d => `${d.date}: ${d.score} Punkte (${d.severity})`).join('\n')}

Erstelle eine professionelle Interpretation mit:
1. Klinische Bedeutung der Ver√§nderungen
2. Prognose-Einsch√§tzung  
3. Konkrete Therapie-Empfehlungen
4. Warnsignale (falls vorhanden)

Antworte strukturiert und wissenschaftlich fundiert.`;

            try {
                detailedAnalysis = await callOpenAI([
                    { role: "system", content: "Du bist ein erfahrener Psychotherapeut und Supervisor mit Expertise in Outcome-Messung." },
                    { role: "user", content: prompt }
                ]);
            } catch (error) {
                console.error('KI-Analyse Fehler:', error);
                detailedAnalysis = 'KI-Analyse momentan nicht verf√ºgbar.';
            }
        }
        
        return {
            analysis: detailedAnalysis || generateBasicAnalysis(latest, previous, trend, trendDescription),
            trend: trend,
            scoreChange: scoreDifference,
            percentageChange: percentageChange,
            currentScore: latest.total_score,
            currentSeverity: latest.severity_level,
            assessmentCount: assessments.length,
            recommendations: generateRecommendations(trend, latest.severity_level, assessmentType)
        };
        
    } catch (error) {
        console.error('‚ùå Fehler bei Outcome-Analyse:', error);
        throw error;
    }
}

function generateBasicAnalysis(latest, previous, trend, trendDescription) {
    const assessment = ASSESSMENTS[latest.assessment_type];
    
    return `
        <div style="background: #f8f9ff; padding: 20px; border-radius: 12px; border-left: 4px solid #667eea;">
            <h4 style="color: #667eea; margin-bottom: 15px;">üìä Verlaufsanalyse ${assessment.name}</h4>
            
            <p><strong>Aktueller Status:</strong><br>
            Score: ${latest.total_score}/${assessment.maxScore} Punkte<br>
            Schweregrad: ${latest.severity_level}<br>
            ${trendDescription}</p>
            
            <p><strong>Klinische Interpretation:</strong><br>
            ${trend === 'improving' ? 
                '‚úÖ Der Patient zeigt eine positive Entwicklung. Die Symptombelastung hat sich messbar reduziert.' :
                trend === 'worsening' ?
                '‚ö†Ô∏è Verschlechterung erkennbar. Therapieplan sollte √ºberpr√ºft und angepasst werden.' :
                '‚û°Ô∏è Stabiler Verlauf. Aktuelle Interventionen scheinen angemessen zu sein.'
            }</p>
            
            <p><strong>Empfehlung:</strong><br>
            ${trend === 'improving' ? 
                'Aktuelle Therapiestrategie beibehalten. N√§chstes Assessment in 4 Wochen.' :
                trend === 'worsening' ?
                'Supervision erw√§gen. Therapiefrequenz erh√∂hen. Krisenintervention pr√ºfen.' :
                'Regelm√§√üige Assessments fortf√ºhren. Therapieziele √ºberpr√ºfen.'
            }</p>
        </div>
    `;
}

function generateRecommendations(trend, severity, assessmentType) {
    const recommendations = [];
    
    if (trend === 'improving') {
        recommendations.push('Aktuelle Therapiestrategie beibehalten');
        recommendations.push('Fortschritte mit Patient besprechen und verst√§rken');
        recommendations.push('N√§chstes Assessment in 4 Wochen');
    } else if (trend === 'worsening') {
        recommendations.push('Therapieplan √ºberpr√ºfen und anpassen');
        recommendations.push('Supervision oder Intervision in Anspruch nehmen');
        recommendations.push('H√§ufigere Termine erw√§gen');
        if (severity === 'severe') {
            recommendations.push('‚ö†Ô∏è Krisenintervention und Sicherheitsplan pr√ºfen');
        }
    } else {
        recommendations.push('Regelm√§√üige Assessments fortf√ºhren');
        recommendations.push('Therapieziele und -methoden evaluieren');
        recommendations.push('Motivation und Therapieadh√§renz st√§rken');
    }
    
    return recommendations;
}

// --- CLIENTS API ROUTES --- //

app.get("/api/clients", (req, res) => {
  try {
    const clients = getClients();
    console.log(`‚úÖ Loaded ${clients.length} clients`);
    res.json(clients);
  } catch (err) {
    console.error("‚ùå Fehler beim Abrufen der Clients:", err);
    res.status(500).json({ error: "Fehler beim Abrufen der Clients" });
  }
});

app.get("/api/clients/:id", (req, res) => {
  try {
    const client = getClientById(req.params.id);
    if (!client) return res.status(404).json({ error: "Client nicht gefunden" });
    res.json(client);
  } catch (err) {
    console.error("‚ùå Fehler beim Abrufen eines Clients:", err);
    res.status(500).json({ error: "Fehler beim Abrufen des Clients" });
  }
});

app.post("/api/clients", (req, res) => {
  try {
    const clientData = {
      name: req.body.initials || req.body.name,
      email: req.body.email,
      phone: req.body.phone,
      birth_date: req.body.birth_date,
      address: req.body.address,
      diagnosis: req.body.diagnosis,
      notes: req.body.notes || `Therapie: ${req.body.therapy || 'Nicht angegeben'}`
    };

    if (!clientData.name) {
      return res.status(400).json({ error: "Initialen/Name ist erforderlich" });
    }

    const result = addClient(clientData);
    console.log(`‚úÖ Client hinzugef√ºgt: ${clientData.name}`);
    res.json({ success: true, id: result.lastInsertRowid });
  } catch (err) {
    console.error("‚ùå Fehler beim Hinzuf√ºgen eines Clients:", err);
    res.status(500).json({ error: "Fehler beim Hinzuf√ºgen des Clients" });
  }
});

app.put("/api/clients/:id", (req, res) => {
  try {
    const updates = req.body;
    delete updates.id;
    
    const result = updateClient(req.params.id, updates);
    if (result.changes === 0) {
      return res.status(404).json({ error: "Client nicht gefunden" });
    }
    res.json({ success: true });
  } catch (err) {
    console.error("‚ùå Fehler beim Aktualisieren des Clients:", err);
    res.status(500).json({ error: "Fehler beim Aktualisieren des Clients" });
  }
});

app.delete("/api/clients/:id", (req, res) => {
  try {
    const result = deleteClient(req.params.id);
    if (result.changes === 0) {
      return res.status(404).json({ error: "Client nicht gefunden" });
    }
    res.json({ success: true });
  } catch (err) {
    console.error("‚ùå Fehler beim L√∂schen eines Clients:", err);
    res.status(500).json({ error: "Fehler beim L√∂schen des Clients" });
  }
});

// --- ENHANCED AUDIO ROUTES --- //

app.post("/api/audio/upload", upload.single('audio'), async (req, res) => {
    try {
        if (!req.file) {
            return res.status(400).json({ error: "Keine Audio-Datei hochgeladen" });
        }

        console.log(`üé§ Audio-Datei hochgeladen: ${req.file.originalname}`);
        
        const audioFilePath = req.file.path;
        const clientId = req.body.client_id || null;
        const analysisType = req.body.analysis_type || 'protocol';

        // Transkription mit Whisper
        console.log('üîÑ Starte Whisper-Transkription...');
        const transcription = await transcribeAudio(audioFilePath);
        console.log('‚úÖ Transkription abgeschlossen');

        // KI-Analyse des Transkripts
        console.log('üîÑ Starte KI-Analyse...');
        const analysis = await analyzeTherapyText(transcription, analysisType);
        console.log('‚úÖ KI-Analyse abgeschlossen');

        // Speichere Dokument in Datenbank
        const docData = {
            client_id: clientId,
            filename: req.file.filename,
            original_name: req.file.originalname,
            file_path: req.file.path,
            file_type: req.file.mimetype,
            file_size: req.file.size
        };
        
        const docResult = addDocument(docData);

        // Speichere Session falls Client ID vorhanden
        if (clientId) {
            const sessionData = {
                client_id: clientId,
                date: new Date().toISOString().split('T')[0],
                duration: Math.ceil(req.file.size / 1000000), // Rough estimate
                type: 'Audio-Sitzung',
                notes: analysis,
                private_notes: `Transkript:\n\n${transcription}`
            };
            
            addSession(sessionData);
        }

        res.json({
            success: true,
            transcription: transcription,
            analysis: analysis,
            document_id: docResult.lastInsertRowid,
            file: {
                name: req.file.originalname,
                size: req.file.size,
                type: req.file.mimetype
            }
        });

    } catch (error) {
        console.error("‚ùå Fehler bei Audio-Verarbeitung:", error);
        
        // Clean up uploaded file on error
        if (req.file && fs.existsSync(req.file.path)) {
            fs.unlinkSync(req.file.path);
        }
        
        res.status(500).json({ 
            error: "Fehler bei Audio-Verarbeitung: " + error.message,
            details: error.message.includes('API Key') ? 'OpenAI API Key nicht konfiguriert' : 'Technischer Fehler'
        });
    }
});

app.post("/api/audio/analyze", async (req, res) => {
    try {
        const { text, analysis_type, client_id } = req.body;
        
        if (!text) {
            return res.status(400).json({ error: "Text f√ºr Analyse erforderlich" });
        }

        console.log('üîÑ Starte Text-Analyse...');
        const analysis = await analyzeTherapyText(text, analysis_type);
        console.log('‚úÖ Text-Analyse abgeschlossen');

        // Speichere Chat-Nachricht falls Client ID vorhanden
        if (client_id) {
            addChatMessage({
                client_id: client_id,
                role: 'user',
                content: `Analyse-Anfrage: ${text.substring(0, 100)}...`
            });
            
            addChatMessage({
                client_id: client_id,
                role: 'assistant',
                content: analysis
            });
        }

        res.json({
            success: true,
            analysis: analysis,
            analysis_type: analysis_type
        });

    } catch (error) {
        console.error("‚ùå Fehler bei Text-Analyse:", error);
        res.status(500).json({ 
            error: "Fehler bei Text-Analyse: " + error.message 
        });
    }
});

// --- ENHANCED CHAT ROUTES --- //

app.post("/api/chat", async (req, res) => {
  try {
    const { message, client_id, context, analysis_request } = req.body;
    
    if (!message) {
      return res.status(400).json({ error: "Nachricht ist erforderlich" });
    }

    console.log(`üí¨ Enhanced Chat-Anfrage: ${message.substring(0, 50)}...`);
    
    // Speichere User-Nachricht
    if (client_id) {
      addChatMessage({
        client_id: client_id,
        role: 'user',
        content: message
      });
    }

    let reply = '';
    
    if (process.env.OPENAI_API_KEY) {
      try {
        // Erweiterte Kontext-Integration
        let systemPrompt = `Du bist ein erfahrener Psychotherapeut und KI-Assistent f√ºr therapeutische Praxis. 

Du hilfst bei:
- Therapieplanung und -methoden
- Diagnostischen √úberlegungen  
- Behandlungsans√§tzen
- Supervision und Fallbesprechung
- Dokumentation und Protokollerstellung
- Fortschrittsbewertung

Antworte immer:
- Professionell und wissenschaftlich fundiert
- Empathisch und ethisch verantwortlich
- Mit konkreten, praxisorientierten Empfehlungen
- Unter Ber√ºcksichtigung der DSGVO und Schweigepflicht

Wichtig: Du ersetzt keine professionelle Supervision oder Ausbildung, sondern erg√§nzt diese.`;

        // F√ºge Kontext hinzu falls vorhanden
        if (context) {
          systemPrompt += `\n\nAktueller Kontext: ${context}`;
        }

        if (analysis_request) {
          systemPrompt += `\n\nSpezielle Analyse-Anfrage: ${analysis_request}`;
        }

        const messages = [
          { role: "system", content: systemPrompt },
          { role: "user", content: message }
        ];

        // Hole Chat-Historie f√ºr besseren Kontext
        if (client_id) {
          const history = getChatHistory(client_id, 5); // Letzte 5 Nachrichten
          history.forEach(msg => {
            if (msg.role === 'user' || msg.role === 'assistant') {
              messages.splice(-1, 0, { role: msg.role, content: msg.content });
            }
          });
        }

        reply = await callOpenAI(messages);

      } catch (apiError) {
        console.error("‚ùå OpenAI API Fehler:", apiError);
        reply = generateEnhancedFallbackResponse(message, apiError.message);
      }
    } else {
      reply = generateEnhancedFallbackResponse(message, 'API Key fehlt');
    }

    // Speichere KI-Antwort
    if (client_id) {
      addChatMessage({
        client_id: client_id,
        role: 'assistant',
        content: reply
      });
    }

    res.json({ reply: reply });

  } catch (err) {
    console.error("‚ùå Fehler im Enhanced Chat:", err);
    res.status(500).json({ 
      reply: "Entschuldigung, es ist ein technischer Fehler aufgetreten. Bitte versuchen Sie es sp√§ter erneut." 
    });
  }
});

// --- FILE UPLOAD ROUTES --- //

app.post("/api/upload", upload.single('file'), async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({ error: "Keine Datei hochgeladen" });
    }

    console.log(`üìÅ Datei hochgeladen: ${req.file.originalname}`);
    
    let fileContent = '';
    const filePath = req.file.path;
    
    // Extract text based on file type
    if (req.file.mimetype.startsWith('text/') || req.file.originalname.endsWith('.txt')) {
      fileContent = fs.readFileSync(filePath, 'utf8');
    } else if (req.file.originalname.endsWith('.docx')) {
      const result = await mammoth.extractRawText({ path: filePath });
      fileContent = result.value;
    } else if (req.file.mimetype === 'application/pdf') {
      const dataBuffer = fs.readFileSync(filePath);
      const pdfData = await pdfParse(dataBuffer);
      fileContent = pdfData.text;
    } else if (req.file.mimetype.startsWith('image/')) {
      fileContent = `[Bild-Datei: ${req.file.originalname}] - Bildanalyse mit OpenAI Vision API w√ºrde hier implementiert werden.`;
    }

    // Save document info to database
    const docData = {
      client_id: req.body.client_id || null,
      filename: req.file.filename,
      original_name: req.file.originalname,
      file_path: req.file.path,
      file_type: req.file.mimetype,
      file_size: req.file.size
    };
    
    addDocument(docData);
    
    // Enhanced AI Analysis
    let analysis = '';
    if (process.env.OPENAI_API_KEY && fileContent) {
      analysis = await analyzeTherapyText(fileContent, 'general');
    } else {
      analysis = `<strong>Datei erfolgreich hochgeladen:</strong><br>
                  Name: ${req.file.originalname}<br>
                  Gr√∂√üe: ${(req.file.size / 1024).toFixed(2)} KB<br>
                  Typ: ${req.file.mimetype}<br><br>
                  <em>KI-Analyse ${process.env.OPENAI_API_KEY ? 'konnte nicht durchgef√ºhrt werden' : 'nicht verf√ºgbar (OpenAI API Key fehlt)'}</em><br><br>
                  Dateiinhalt (Vorschau):<br>
                  <pre>${fileContent.substring(0, 500)}${fileContent.length > 500 ? '...' : ''}</pre>`;
    }

    res.json({ 
      success: true, 
      analysis: analysis,
      file: {
        name: req.file.originalname,
        size: req.file.size,
        type: req.file.mimetype
      }
    });

  } catch (err) {
    console.error("‚ùå Fehler beim Verarbeiten der Datei:", err);
    res.status(500).json({ error: "Fehler beim Verarbeiten der Datei: " + err.message });
  }
});

// --- ASSESSMENT API ROUTES --- //

// Verf√ºgbare Assessments abrufen
app.get("/api/assessments/types", (req, res) => {
    try {
        const types = Object.keys(ASSESSMENTS).map(key => ({
            key: key,
            name: ASSESSMENTS[key].name,
            type: ASSESSMENTS[key].type,
            questionCount: ASSESSMENTS[key].questions.length
        }));
        res.json(types);
    } catch (error) {
        res.status(500).json({ error: "Fehler beim Abrufen der Assessment-Typen" });
    }
});

// Spezifisches Assessment-Template abrufen
app.get("/api/assessments/template/:type", (req, res) => {
    try {
        const assessment = ASSESSMENTS[req.params.type];
        if (!assessment) {
            return res.status(404).json({ error: "Assessment-Typ nicht gefunden" });
        }
        res.json(assessment);
    } catch (error) {
        res.status(500).json({ error: "Fehler beim Abrufen des Assessment-Templates" });
    }
});

// Assessment einreichen und bewerten
app.post("/api/assessments", (req, res) => {
    try {
        const { client_id, session_id, assessment_type, responses, notes } = req.body;
        
        if (!client_id || !assessment_type || !responses) {
            return res.status(400).json({ error: "Pflichtfelder fehlen" });
        }
        
        // Score berechnen
        const scoreResult = calculateAssessmentScore(assessment_type, responses);
        
        // Assessment speichern
        const assessmentData = {
            client_id,
            session_id,
            assessment_type,
            responses,
            total_score: scoreResult.totalScore,
            severity_level: scoreResult.severityLevel,
            notes
        };
        
        const result = addAssessment(assessmentData);
        
        res.json({
            success: true,
            id: result.lastInsertRowid,
            score: scoreResult
        });
        
    } catch (error) {
        console.error("‚ùå Fehler beim Verarbeiten des Assessments:", error);
        res.status(500).json({ error: "Fehler beim Verarbeiten des Assessments" });
    }
});

// Assessments f√ºr einen Client abrufen
app.get("/api/clients/:id/assessments", (req, res) => {
    try {
        const assessments = getAssessmentsByClient(req.params.id);
        res.json(assessments);
    } catch (error) {
        res.status(500).json({ error: "Fehler beim Abrufen der Assessments" });
    }
});

// Outcome-Analyse generieren
app.get("/api/clients/:id/outcome-analysis", async (req, res) => {
    try {
        const clientId = req.params.id;
        const assessmentType = req.query.type || null;
        
        const analysis = await generateOutcomeAnalysis(clientId, assessmentType);
        res.json(analysis);
        
    } catch (error) {
        console.error("‚ùå Fehler bei Outcome-Analyse:", error);
        res.status(500).json({ error: "Fehler bei der Outcome-Analyse" });
    }
});

// Assessment-Verlauf f√ºr Visualisierung
app.get("/api/clients/:id/assessment-history/:type", (req, res) => {
    try {
        const assessments = getAssessmentsByClient(req.params.id, req.params.type);
        
        const history = assessments.reverse().map(a => ({
            date: a.completed_at.split('T')[0],
            score: a.total_score,
            severity: a.severity_level,
            sessionId: a.session_id
        }));
        
        res.json(history);
    } catch (error) {
        res.status(500).json({ error: "Fehler beim Abrufen der Assessment-Historie" });
    }
});

// --- STATISTICS ROUTE --- //
app.get("/api/stats", (req, res) => {
  try {
    const stats = getStatistics();
    
    const completeStats = {
      totalClients: stats.totalClients || 0,
      totalSessions: stats.totalSessions || 0,
      pendingTodos: stats.pendingTodos || 0,
      activePlans: stats.activePlans || 0
    };
    
    res.json(completeStats);
  } catch (err) {
    console.error("‚ùå Fehler beim Abrufen der Statistiken:", err);
    res.status(500).json({ 
      totalClients: 0,
      totalSessions: 0,
      pendingTodos: 0,
      activePlans: 0
    });
  }
});
// Security Middleware
app.use(helmet({
  contentSecurityPolicy: {
    directives: {
      defaultSrc: ["'self'"],
      styleSrc: ["'self'", "'unsafe-inline'"],
      scriptSrc: ["'self'", "'unsafe-inline'"],
      imgSrc: ["'self'", "data:", "https:"],
      connectSrc: ["'self'", "https://api.openai.com"]
    }
  }
}));

// Rate Limiting
const loginLimiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 5, // 5 attempts per window
  message: { error: 'Zu viele Login-Versuche. Bitte warten Sie 15 Minuten.' },
  standardHeaders: true,
  legacyHeaders: false,
});

const generalLimiter = rateLimit({
  windowMs: 15 * 60 * 1000,
  max: 100, // 100 requests per window
  message: { error: 'Zu viele Anfragen. Bitte verlangsamen Sie.' }
});

app.use('/api/auth/login', loginLimiter);
app.use('/api/', generalLimiter);

// Session Configuration
app.use(session({
  store: new SQLiteStore({
    db: 'sessions.db',
    dir: './data',
    table: 'sessions'
  }),
  secret: process.env.SESSION_SECRET || 'change-this-secret-in-production',
  resave: false,
  saveUninitialized: false,
  name: 'praxida.sid',
  cookie: {
    secure: process.env.NODE_ENV === 'production',
    httpOnly: true,
    maxAge: 24 * 60 * 60 * 1000, // 24 hours
    sameSite: 'lax'
  },
  rolling: true
}));

// === DATABASE HELPER FUNCTIONS === //

function getUserByEmail(email) {
  try {
    const stmt = db.prepare(`
      SELECT u.*, p.name as praxis_name 
      FROM users u 
      LEFT JOIN praxis p ON u.praxis_id = p.id 
      WHERE u.email = ?
    `);
    return stmt.get(email);
  } catch (error) {
    console.error('‚ùå Fehler beim Abrufen des Benutzers:', error);
    return null;
  }
}

function getUserById(id) {
  try {
    const stmt = db.prepare(`
      SELECT u.*, p.name as praxis_name 
      FROM users u 
      LEFT JOIN praxis p ON u.praxis_id = p.id 
      WHERE u.id = ?
    `);
    return stmt.get(id);
  } catch (error) {
    console.error('‚ùå Fehler beim Abrufen des Benutzers:', error);
    return null;
  }
}

function getPraxisByName(name) {
  try {
    const stmt = db.prepare("SELECT * FROM praxis WHERE name = ?");
    return stmt.get(name);
  } catch (error) {
    console.error('‚ùå Fehler beim Abrufen der Praxis:', error);
    return null;
  }
}

function createLoginAttempt(email, success, ip, userAgent) {
  try {
    const stmt = db.prepare(`
      INSERT INTO login_attempts (email, success, ip_address, user_agent, attempted_at)
      VALUES (?, ?, ?, ?, CURRENT_TIMESTAMP)
    `);
    return stmt.run(email, success ? 1 : 0, ip, userAgent);
  } catch (error) {
    console.warn('Fehler beim Speichern des Login-Versuchs:', error);
  }
}

function getRecentLoginAttempts(email, windowMinutes = 15) {
  try {
    const stmt = db.prepare(`
      SELECT COUNT(*) as count 
      FROM login_attempts 
      WHERE email = ? AND success = 0 AND attempted_at > datetime('now', '-${windowMinutes} minutes')
    `);
    return stmt.get(email)?.count || 0;
  } catch (error) {
    console.warn('Fehler beim Abrufen der Login-Versuche:', error);
    return 0;
  }
}

// Create login_attempts table if not exists
try {
  db.prepare(`
    CREATE TABLE IF NOT EXISTS login_attempts (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      email TEXT NOT NULL,
      success BOOLEAN NOT NULL,
      ip_address TEXT,
      user_agent TEXT,
      attempted_at TEXT DEFAULT CURRENT_TIMESTAMP
    )
  `).run();
  
  db.prepare("CREATE INDEX IF NOT EXISTS idx_login_attempts_email ON login_attempts(email)").run();
  db.prepare("CREATE INDEX IF NOT EXISTS idx_login_attempts_attempted_at ON login_attempts(attempted_at)").run();
} catch (error) {
  console.warn('Login attempts table bereits vorhanden oder Fehler:', error);
}

// === AUTHENTICATION MIDDLEWARE === //

function requireAuth(req, res, next) {
  if (!req.session?.user) {
    return res.status(401).json({ 
      error: 'Authentifizierung erforderlich',
      code: 'AUTH_REQUIRED' 
    });
  }
  
  // Check if user still exists in database
  const user = getUserById(req.session.user.id);
  if (!user) {
    req.session.destroy();
    return res.status(401).json({ 
      error: 'Benutzer nicht mehr vorhanden',
      code: 'USER_NOT_FOUND' 
    });
  }
  
  req.user = user;
  next();
}

function requireRole(...roles) {
  return (req, res, next) => {
    if (!req.user) {
      return res.status(401).json({ 
        error: 'Authentifizierung erforderlich' 
      });
    }
    
    if (!roles.includes(req.user.role)) {
      return res.status(403).json({ 
        error: 'Insufficient permissions',
        required_roles: roles,
        user_role: req.user.role
      });
    }
    
    next();
  };
}

function requirePraxis(req, res, next) {
  if (!req.user?.praxis_id) {
    return res.status(403).json({ 
      error: 'Praxis-Zuordnung erforderlich' 
    });
  }
  next();
}

// === AUTHENTICATION ROUTES === //

// Register new praxis (initial setup)
app.post('/api/auth/register-praxis', async (req, res) => {
  try {
    const { 
      praxis_name, 
      praxis_email, 
      praxis_telefon, 
      praxis_adresse,
      admin_name, 
      admin_email, 
      admin_password 
    } = req.body;

    // Validation
    if (!praxis_name || !admin_name || !admin_email || !admin_password) {
      return res.status(400).json({ 
        error: 'Alle Pflichtfelder m√ºssen ausgef√ºllt werden' 
      });
    }

    if (admin_password.length < 8) {
      return res.status(400).json({ 
        error: 'Passwort muss mindestens 8 Zeichen lang sein' 
      });
    }

    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(admin_email)) {
      return res.status(400).json({ 
        error: 'Ung√ºltige E-Mail-Adresse' 
      });
    }

    // Check if praxis or admin already exists
    const existingPraxis = getPraxisByName(praxis_name);
    if (existingPraxis) {
      return res.status(400).json({ 
        error: 'Praxis-Name bereits vergeben' 
      });
    }

    const existingUser = getUserByEmail(admin_email);
    if (existingUser) {
      return res.status(400).json({ 
        error: 'E-Mail-Adresse bereits registriert' 
      });
    }

    // Create praxis
    const praxisData = {
      name: praxis_name,
      email: praxis_email,
      telefon: praxis_telefon,
      adresse: praxis_adresse
    };
    
    const praxisResult = addPraxis(praxisData);
    const praxisId = praxisResult.lastInsertRowid;

    // Hash password
    const saltRounds = 12;
    const hashedPassword = await bcrypt.hash(admin_password, saltRounds);

    // Create admin user
    const userData = {
      praxis_id: praxisId,
      name: admin_name,
      email: admin_email,
      password_hash: hashedPassword,
      role: 'admin'
    };

    const userResult = addUser(userData);

    console.log(`‚úÖ Neue Praxis registriert: ${praxis_name} mit Admin: ${admin_name}`);

    res.json({ 
      success: true, 
      message: 'Praxis erfolgreich registriert',
      praxis_id: praxisId,
      user_id: userResult.lastInsertRowid
    });

  } catch (error) {
    console.error('‚ùå Fehler bei Praxis-Registrierung:', error);
    res.status(500).json({ 
      error: 'Fehler bei der Registrierung: ' + error.message 
    });
  }
});

// User Login
app.post('/api/auth/login', async (req, res) => {
  try {
    const { email, password, praxis_name } = req.body;
    const ip = req.ip || req.connection.remoteAddress;
    const userAgent = req.get('User-Agent');

    // Validation
    if (!email || !password) {
      return res.status(400).json({ 
        error: 'E-Mail und Passwort sind erforderlich' 
      });
    }

    // Check for recent failed attempts
    const recentAttempts = getRecentLoginAttempts(email);
    if (recentAttempts >= 5) {
      createLoginAttempt(email, false, ip, userAgent);
      return res.status(429).json({ 
        error: 'Account tempor√§r gesperrt. Zu viele fehlgeschlagene Login-Versuche.' 
      });
    }

    // Get user
    const user = getUserByEmail(email);
    if (!user) {
      createLoginAttempt(email, false, ip, userAgent);
      return res.status(401).json({ 
        error: 'Ung√ºltige Anmeldedaten' 
      });
    }

    // Verify password
    const passwordValid = await bcrypt.compare(password, user.password_hash);
    if (!passwordValid) {
      createLoginAttempt(email, false, ip, userAgent);
      return res.status(401).json({ 
        error: 'Ung√ºltige Anmeldedaten' 
      });
    }

    // Check praxis match if provided
    if (praxis_name && user.praxis_name !== praxis_name) {
      createLoginAttempt(email, false, ip, userAgent);
      return res.status(401).json({ 
        error: 'Benutzer geh√∂rt nicht zu der angegebenen Praxis' 
      });
    }

    // Successful login
    createLoginAttempt(email, true, ip, userAgent);

    // Create session
    req.session.user = {
      id: user.id,
      name: user.name,
      email: user.email,
      role: user.role,
      praxis_id: user.praxis_id,
      praxis_name: user.praxis_name
    };

    req.session.login_time = new Date().toISOString();
    req.session.ip = ip;

    console.log(`‚úÖ Erfolgreicher Login: ${user.name} (${user.email}) - Rolle: ${user.role}`);

    res.json({
      success: true,
      user: {
        id: user.id,
        name: user.name,
        email: user.email,
        role: user.role,
        praxis_name: user.praxis_name
      },
      message: 'Erfolgreich angemeldet'
    });

  } catch (error) {
    console.error('‚ùå Login-Fehler:', error);
    res.status(500).json({ 
      error: 'Fehler beim Anmelden: ' + error.message 
    });
  }
});

// User Logout
app.post('/api/auth/logout', (req, res) => {
  if (req.session?.user) {
    const userName = req.session.user.name;
    req.session.destroy((err) => {
      if (err) {
        console.error('‚ùå Logout-Fehler:', err);
        return res.status(500).json({ error: 'Fehler beim Abmelden' });
      }
      
      console.log(`üëã Benutzer abgemeldet: ${userName}`);
      res.json({ success: true, message: 'Erfolgreich abgemeldet' });
    });
  } else {
    res.json({ success: true, message: 'Bereits abgemeldet' });
  }
});

// Get current user info
app.get('/api/auth/me', requireAuth, (req, res) => {
  res.json({
    user: {
      id: req.user.id,
      name: req.user.name,
      email: req.user.email,
      role: req.user.role,
      praxis_name: req.user.praxis_name,
      praxis_id: req.user.praxis_id
    },
    session_info: {
      login_time: req.session.login_time,
      expires: new Date(Date.now() + req.session.cookie.maxAge).toISOString()
    }
  });
});

// Add user to existing praxis (admin only)
app.post('/api/auth/add-user', requireAuth, requireRole('admin'), async (req, res) => {
  try {
    const { name, email, password, role } = req.body;

    // Validation
    if (!name || !email || !password || !role) {
      return res.status(400).json({ 
        error: 'Alle Felder sind erforderlich' 
      });
    }

    if (!['admin', 'therapeut', 'assistenz'].includes(role)) {
      return res.status(400).json({ 
        error: 'Ung√ºltige Rolle' 
      });
    }

    if (password.length < 8) {
      return res.status(400).json({ 
        error: 'Passwort muss mindestens 8 Zeichen lang sein' 
      });
    }

    // Check if user already exists
    const existingUser = getUserByEmail(email);
    if (existingUser) {
      return res.status(400).json({ 
        error: 'E-Mail-Adresse bereits registriert' 
      });
    }

    // Hash password
    const hashedPassword = await bcrypt.hash(password, 12);

    // Create user in same praxis as admin
    const userData = {
      praxis_id: req.user.praxis_id,
      name: name,
      email: email,
      password_hash: hashedPassword,
      role: role
    };

    const result = addUser(userData);

    console.log(`‚úÖ Neuer Benutzer hinzugef√ºgt: ${name} (${role}) von Admin: ${req.user.name}`);

    res.json({ 
      success: true, 
      message: 'Benutzer erfolgreich hinzugef√ºgt',
      user_id: result.lastInsertRowid
    });

  } catch (error) {
    console.error('‚ùå Fehler beim Hinzuf√ºgen des Benutzers:', error);
    res.status(500).json({ 
      error: 'Fehler beim Hinzuf√ºgen des Benutzers: ' + error.message 
    });
  }
});

// Get users in same praxis (admin and therapeut)
app.get('/api/auth/users', requireAuth, requireRole('admin', 'therapeut'), (req, res) => {
  try {
    const users = getUsersByPraxis(req.user.praxis_id);
    
    // Remove sensitive data
    const safeUsers = users.map(user => ({
      id: user.id,
      name: user.name,
      email: user.email,
      role: user.role,
      created_at: user.created_at
    }));

    res.json(safeUsers);
  } catch (error) {
    console.error('‚ùå Fehler beim Abrufen der Benutzer:', error);
    res.status(500).json({ error: 'Fehler beim Abrufen der Benutzer' });
  }
});

// Update user password
app.put('/api/auth/change-password', requireAuth, async (req, res) => {
  try {
    const { current_password, new_password } = req.body;

    if (!current_password || !new_password) {
      return res.status(400).json({ 
        error: 'Aktuelles und neues Passwort erforderlich' 
      });
    }

    if (new_password.length < 8) {
      return res.status(400).json({ 
        error: 'Neues Passwort muss mindestens 8 Zeichen lang sein' 
      });
    }

    // Verify current password
    const user = getUserById(req.user.id);
    const passwordValid = await bcrypt.compare(current_password, user.password_hash);
    
    if (!passwordValid) {
      return res.status(401).json({ 
        error: 'Aktuelles Passwort ist falsch' 
      });
    }

    // Hash new password
    const hashedPassword = await bcrypt.hash(new_password, 12);

    // Update password
    const stmt = db.prepare("UPDATE users SET password_hash = ? WHERE id = ?");
    stmt.run(hashedPassword, req.user.id);

    console.log(`üîë Passwort ge√§ndert f√ºr Benutzer: ${req.user.name}`);

    res.json({ 
      success: true, 
      message: 'Passwort erfolgreich ge√§ndert' 
    });

  } catch (error) {
    console.error('‚ùå Fehler beim Passwort-Wechsel:', error);
    res.status(500).json({ 
      error: 'Fehler beim √Ñndern des Passworts: ' + error.message 
    });
  }
});

// Delete user (admin only, cannot delete self)
app.delete('/api/auth/users/:id', requireAuth, requireRole('admin'), (req, res) => {
  try {
    const userId = parseInt(req.params.id);

    if (userId === req.user.id) {
      return res.status(400).json({ 
        error: 'Sie k√∂nnen sich nicht selbst l√∂schen' 
      });
    }

    // Check if user belongs to same praxis
    const targetUser = getUserById(userId);
    if (!targetUser || targetUser.praxis_id !== req.user.praxis_id) {
      return res.status(404).json({ 
        error: 'Benutzer nicht gefunden oder geh√∂rt zu anderer Praxis' 
      });
    }

    // Delete user
    const stmt = db.prepare("DELETE FROM users WHERE id = ?");
    const result = stmt.run(userId);

    if (result.changes === 0) {
      return res.status(404).json({ 
        error: 'Benutzer nicht gefunden' 
      });
    }

    console.log(`üóëÔ∏è Benutzer gel√∂scht: ${targetUser.name} von Admin: ${req.user.name}`);

    res.json({ 
      success: true, 
      message: 'Benutzer erfolgreich gel√∂scht' 
    });

  } catch (error) {
    console.error('‚ùå Fehler beim L√∂schen des Benutzers:', error);
    res.status(500).json({ 
      error: 'Fehler beim L√∂schen des Benutzers: ' + error.message 
    });
  }
});

// Get login attempts (admin only)
app.get('/api/auth/login-attempts', requireAuth, requireRole('admin'), (req, res) => {
  try {
    const stmt = db.prepare(`
      SELECT email, success, ip_address, attempted_at 
      FROM login_attempts 
      WHERE attempted_at > datetime('now', '-7 days')
      ORDER BY attempted_at DESC 
      LIMIT 100
    `);
    
    const attempts = stmt.all();
    res.json(attempts);
  } catch (error) {
    console.error('‚ùå Fehler beim Abrufen der Login-Versuche:', error);
    res.status(500).json({ error: 'Fehler beim Abrufen der Login-Versuche' });
  }
});

// === PROTECT EXISTING API ROUTES === //

// Middleware to apply authentication to existing routes
app.use('/api/clients', requireAuth, requirePraxis);
app.use('/api/sessions', requireAuth, requirePraxis);
app.use('/api/upload', requireAuth);
app.use('/api/audio', requireAuth);
app.use('/api/chat', requireAuth);
app.use('/api/assessments', requireAuth, requirePraxis);

// Filter clients by praxis
const originalGetClients = app._router.stack.find(layer => 
  layer.route?.path === '/api/clients' && 
  layer.route?.methods?.get
);

if (originalGetClients) {
  app.get("/api/clients", requireAuth, requirePraxis, (req, res) => {
    try {
      // Get all clients but filter by praxis_id
      const stmt = db.prepare(`
        SELECT 
          c.*,
          COUNT(s.id) as total_sessions,
          MAX(s.date) as latest_session
        FROM clients c
        LEFT JOIN sessions s ON c.id = s.client_id
        WHERE c.praxis_id = ? OR c.praxis_id IS NULL
        GROUP BY c.id
        ORDER BY c.name ASC
      `);
      
      const clients = stmt.all(req.user.praxis_id);
      
      // Update any clients without praxis_id
      const updateStmt = db.prepare("UPDATE clients SET praxis_id = ? WHERE praxis_id IS NULL");
      updateStmt.run(req.user.praxis_id);
      
      console.log(`‚úÖ Loaded ${clients.length} clients for praxis ${req.user.praxis_id}`);
      res.json(clients);
    } catch (err) {
      console.error("‚ùå Fehler beim Abrufen der Clients:", err);
      res.status(500).json({ error: "Fehler beim Abrufen der Clients" });
    }
  });
}

// === SESSION MANAGEMENT === //

// Clean expired sessions (run periodically)
function cleanExpiredSessions() {
  try {
    const stmt = db.prepare(`
      DELETE FROM sessions 
      WHERE datetime(expired) < datetime('now')
    `);
    const result = stmt.run();
    if (result.changes > 0) {
      console.log(`üßπ ${result.changes} abgelaufene Sessions gel√∂scht`);
    }
  } catch (error) {
    console.warn('Fehler beim L√∂schen abgelaufener Sessions:', error);
  }
}

// Clean sessions every hour
setInterval(cleanExpiredSessions, 60 * 60 * 1000);

// === DEMO DATA FOR MULTI-TENANT === //

async function createDemoAccounts() {
  try {
    // Check if demo praxis already exists
    const existingPraxis = getPraxisByName('Demo Praxis K√∂ln');
    if (existingPraxis) {
      console.log('üìã Demo-Praxis bereits vorhanden');
      return;
    }

    // Create demo praxis
    const praxisData = {
      name: 'Demo Praxis K√∂ln',
      email: 'info@demo-praxis.de',
      telefon: '+49 221 123456',
      adresse: 'Musterstra√üe 123, 50667 K√∂ln'
    };
    
    const praxisResult = addPraxis(praxisData);
    const praxisId = praxisResult.lastInsertRowid;

    // Create demo users
    const demoUsers = [
      {
        name: 'Dr. Demo Admin',
        email: 'admin@demo-praxis.de',
        password: 'demo123456',
        role: 'admin'
      },
      {
        name: 'Dr. Sarah Therapeutin',
        email: 'therapeut@demo-praxis.de',
        password: 'demo123456',
        role: 'therapeut'
      },
      {
        name: 'Lisa Assistenz',
        email: 'assistenz@demo-praxis.de',
        password: 'demo123456',
        role: 'assistenz'
      }
    ];

    for (const demoUser of demoUsers) {
      const hashedPassword = await bcrypt.hash(demoUser.password, 12);
      
      const userData = {
        praxis_id: praxisId,
        name: demoUser.name,
        email: demoUser.email,
        password_hash: hashedPassword,
        role: demoUser.role
      };

      addUser(userData);
    }

    console.log('‚úÖ Demo-Accounts erstellt:');
    console.log('   üìß admin@demo-praxis.de / demo123456 (Admin)');
    console.log('   üìß therapeut@demo-praxis.de / demo123456 (Therapeut)');
    console.log('   üìß assistenz@demo-praxis.de / demo123456 (Assistenz)');

  } catch (error) {
    console.error('‚ùå Fehler beim Erstellen der Demo-Accounts:', error);
  }
}

// Create demo accounts on startup
setTimeout(createDemoAccounts, 1000);

console.log('üîê Multi-Tenant Authentication System aktiviert!');
console.log('üìù Registrierung: POST /api/auth/register-praxis');
console.log('üîë Login: POST /api/auth/login');
console.log('üë§ Benutzer hinzuf√ºgen: POST /api/auth/add-user');
console.log('üõ°Ô∏è Alle API-Routen sind jetzt authentifiziert');
// --- SESSION ROUTES --- //
app.post("/api/sessions", (req, res) => {
  try {
    const sessionData = {
      client_id: req.body.client_id,
      date: req.body.date || new Date().toISOString().split('T')[0],
      duration: req.body.duration || 50,
      type: req.body.type || 'Einzeltherapie',
      notes: req.body.notes,
      private_notes: req.body.private_notes
    };

    const result = addSession(sessionData);
    console.log(`‚úÖ Session hinzugef√ºgt f√ºr Client ${sessionData.client_id}`);
    res.json({ success: true, id: result.lastInsertRowid });
  } catch (err) {
    console.error("‚ùå Fehler beim Hinzuf√ºgen einer Session:", err);
    res.status(500).json({ error: "Fehler beim Hinzuf√ºgen der Session" });
  }
});

app.get("/api/clients/:id/sessions", (req, res) => {
  try {
    const sessions = getSessionsByClient(req.params.id);
    res.json(sessions);
  } catch (err) {
    console.error("‚ùå Fehler beim Abrufen der Sessions:", err);
    res.status(500).json({ error: "Fehler beim Abrufen der Sessions" });
  }
});

app.get("/api/clients/:id/chat", (req, res) => {
  try {
    const history = getChatHistory(req.params.id);
    res.json(history);
  } catch (err) {
    console.error("‚ùå Fehler beim Abrufen des Chat-Verlaufs:", err);
    res.status(500).json({ error: "Fehler beim Abrufen des Chat-Verlaufs" });
  }
});

// --- ENHANCED HELPER FUNCTIONS --- //

function generateEnhancedFallbackResponse(message, errorDetails) {
  const lowerMessage = message.toLowerCase();
  
  let response = `<div style="background: #fff3cd; border: 1px solid #ffeaa7; border-radius: 8px; padding: 15px; margin: 10px 0;">
    <strong>‚ö†Ô∏è Eingeschr√§nkter Modus</strong><br>
    Die vollst√§ndige KI-Analyse ist momentan nicht verf√ºgbar`;
  
  if (errorDetails && errorDetails.includes('API Key')) {
    response += ` (OpenAI API Key nicht konfiguriert).`;
  } else {
    response += ` (Technischer Fehler).`;
  }
  
  response += `</div>`;
  
  // Intelligente Fallback-Antworten basierend auf Kontext
  if (lowerMessage.includes('whisper') || lowerMessage.includes('audio') || lowerMessage.includes('transkription')) {
    response += `
    <div style="margin-top: 15px;">
      <strong>üé§ Audio-Transkription:</strong><br>
      Um Whisper Speech-to-Text zu nutzen, f√ºgen Sie Ihren OpenAI API Key in die .env Datei ein:<br>
      <code>OPENAI_API_KEY=sk-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</code><br><br>
      
      <strong>Unterst√ºtzte Audio-Formate:</strong><br>
      ‚Ä¢ MP3, WAV, M4A, OGG, FLAC<br>
      ‚Ä¢ Bis zu 100MB Dateigr√∂√üe<br>
      ‚Ä¢ Automatische deutsche Transkription<br>
      ‚Ä¢ KI-gest√ºtzte Therapieprotokoll-Erstellung
    </div>`;
  } else if (lowerMessage.includes('therapie') || lowerMessage.includes('behandlung') || lowerMessage.includes('diagnose')) {
    response += `
    <div style="margin-top: 15px;">
      <strong>ü©∫ Therapeutische Unterst√ºtzung:</strong><br>
      Mit aktivierter KI kann ich Ihnen helfen bei:<br>
      ‚Ä¢ Diagnose-Findung und Differentialdiagnostik<br>
      ‚Ä¢ Therapieplanung und Methodenauswahl<br>
      ‚Ä¢ Supervision und Fallbesprechung<br>
      ‚Ä¢ Fortschrittsbewertung und Dokumentation<br><br>
      
      <em>Basis-Funktionen wie Klient:innen-Verwaltung funktionieren weiterhin vollst√§ndig.</em>
    </div>`;
  } else if (lowerMessage.includes('analyse') || lowerMessage.includes('auswertung')) {
    response += `
    <div style="margin-top: 15px;">
      <strong>üìä KI-Analyse Features:</strong><br>
      Mit OpenAI API Key verf√ºgbar:<br>
      ‚Ä¢ Automatische Sitzungsprotokoll-Erstellung<br>
      ‚Ä¢ Fortschritts- und Verlaufsanalyse<br>
      ‚Ä¢ Thematische Auswertung von Gespr√§chen<br>
      ‚Ä¢ Empfehlungen f√ºr Interventionen<br>
      ‚Ä¢ Strukturierte Dokumentation
    </div>`;
  } else {
    response += `
    <div style="margin-top: 15px;">
      <strong>üí° Verf√ºgbare Funktionen:</strong><br>
      ‚Ä¢ ‚úÖ Klient:innen-Verwaltung<br>
      ‚Ä¢ ‚úÖ Sitzungs-Dokumentation<br>
      ‚Ä¢ ‚úÖ Datei-Upload und -Organisation<br>
      ‚Ä¢ ‚úÖ Chat-Interface (eingeschr√§nkt)<br>
      ‚Ä¢ ‚è≥ KI-Analyse (ben√∂tigt API Key)<br>
      ‚Ä¢ ‚è≥ Whisper-Transkription (ben√∂tigt API Key)
    </div>`;
  }
  
  return response;
}

// --- SERVER START --- //
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`üöÄ Praxida 2.0 Server l√§uft auf Port ${PORT}`);
  console.log(`üìç √ñffnen Sie: http://localhost:${PORT}`);
  
  if (!process.env.OPENAI_API_KEY) {
    console.log(`‚ö†Ô∏è  WARNUNG: Kein OpenAI API Key gefunden!`);
    console.log(`   F√ºgen Sie OPENAI_API_KEY in die .env Datei ein f√ºr:`);
    console.log(`   üé§ Whisper Speech-to-Text`);
    console.log(`   ü§ñ KI-Chat und Analyse`);
    console.log(`   üìä Automatische Protokollerstellung`);
  } else {
    console.log(`‚úÖ OpenAI API Key gefunden!`);
    console.log(`üé§ Whisper Speech-to-Text: AKTIV`);
    console.log(`ü§ñ KI-Funktionen: AKTIV`);
    console.log(`üìä Intelligente Analyse: AKTIV`);
  }
  
  // Create upload directories
  ['uploads', 'uploads/audio'].forEach(dir => {
    if (!fs.existsSync(dir)) {
      fs.mkdirSync(dir, { recursive: true });
      console.log(`üìÅ Ordner erstellt: ${dir}`);
    }
  });
  
  console.log('‚úÖ Outcome-Tracking Backend geladen!');
});
